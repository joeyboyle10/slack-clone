<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SlackClone - Team Communication</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            height: 100vh;
            overflow: hidden;
        }

        .app-container {
            display: flex;
            height: 100vh;
            background: #1a1d29;
            color: #ffffff;
        }

        /* Sidebar */
        .sidebar {
            width: 260px;
            background: #19171d;
            border-right: 1px solid #2d2b36;
            display: flex;
            flex-direction: column;
        }

        .workspace-header {
            padding: 20px;
            border-bottom: 1px solid #2d2b36;
            background: linear-gradient(135deg, #667eea, #764ba2);
        }

        .workspace-name {
            font-size: 18px;
            font-weight: 700;
            color: white;
            margin-bottom: 5px;
        }

        .user-status {
            font-size: 12px;
            opacity: 0.8;
        }

        .channels-section {
            padding: 20px 0;
            flex: 1;
            overflow-y: auto;
        }

        .section-header {
            padding: 0 20px;
            margin-bottom: 10px;
            font-size: 12px;
            font-weight: 600;
            color: #8b8b8b;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .channel-list {
            list-style: none;
        }

        .channel-item {
            padding: 8px 20px;
            cursor: pointer;
            transition: all 0.2s ease;
            border-left: 3px solid transparent;
        }

        .channel-item:hover {
            background: #2d2b36;
        }

        .channel-item.active {
            background: #2d2b36;
            border-left-color: #667eea;
        }

        .channel-name {
            display: flex;
            align-items: center;
            font-size: 14px;
        }

        .channel-prefix {
            margin-right: 5px;
            opacity: 0.7;
        }

        .add-channel-btn {
            margin: 10px 20px;
            padding: 10px;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            transition: background 0.2s ease;
        }

        .add-channel-btn:hover {
            background: #5a67d8;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: #1a1d29;
        }

        .chat-header {
            padding: 20px;
            border-bottom: 1px solid #2d2b36;
            background: #19171d;
        }

        .channel-title {
            font-size: 20px;
            font-weight: 600;
            margin-bottom: 5px;
        }

        .channel-info {
            font-size: 12px;
            opacity: 0.7;
        }

        .messages-container {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
        }

        .message {
            margin-bottom: 20px;
            display: flex;
            align-items: flex-start;
        }

        .message-avatar {
            width: 36px;
            height: 36px;
            border-radius: 6px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 14px;
            margin-right: 12px;
            flex-shrink: 0;
        }

        .message-content {
            flex: 1;
        }

        .message-header {
            display: flex;
            align-items: baseline;
            margin-bottom: 5px;
        }

        .message-author {
            font-weight: 600;
            margin-right: 10px;
            color: #ffffff;
        }

        .message-timestamp {
            font-size: 11px;
            opacity: 0.5;
        }

        .message-text {
            line-height: 1.5;
            color: #e1e1e1;
        }

        /* Message Input */
        .message-input-container {
            padding: 20px;
            border-top: 1px solid #2d2b36;
        }

        .message-input-wrapper {
            display: flex;
            background: #2d2b36;
            border-radius: 8px;
            padding: 12px;
            align-items: center;
        }

        .message-input {
            flex: 1;
            background: none;
            border: none;
            color: #ffffff;
            font-size: 14px;
            outline: none;
            resize: none;
            min-height: 20px;
            max-height: 100px;
        }

        .message-input::placeholder {
            color: #8b8b8b;
        }

        .send-button {
            background: #667eea;
            color: white;
            border: none;
            border-radius: 6px;
            padding: 8px 16px;
            margin-left: 10px;
            cursor: pointer;
            font-size: 14px;
            transition: background 0.2s ease;
        }

        .send-button:hover {
            background: #5a67d8;
        }

        .send-button:disabled {
            background: #4a5568;
            cursor: not-allowed;
        }

        /* Online Users */
        .online-users {
            width: 200px;
            background: #19171d;
            border-left: 1px solid #2d2b36;
            padding: 20px;
        }

        .users-header {
            font-size: 12px;
            font-weight: 600;
            color: #8b8b8b;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 15px;
        }

        .user-item {
            display: flex;
            align-items: center;
            margin-bottom: 12px;
        }

        .user-avatar {
            width: 28px;
            height: 28px;
            border-radius: 4px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: 600;
            margin-right: 10px;
        }

        .user-name {
            font-size: 14px;
        }

        .user-status-dot {
            width: 8px;
            height: 8px;
            background: #4ade80;
            border-radius: 50%;
            margin-left: auto;
        }

        /* Animations */
        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .message {
            animation: slideIn 0.3s ease;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .sidebar {
                width: 200px;
            }
            .online-users {
                display: none;
            }
        }

        @media (max-width: 600px) {
            .sidebar {
                position: fixed;
                left: -260px;
                z-index: 1000;
                height: 100vh;
                transition: left 0.3s ease;
            }

            .sidebar.open {
                left: 0;
            }

            .main-content {
                margin-left: 0;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="workspace-header">
                <div class="workspace-name">TeamSpace</div>
                <div class="user-status">‚óè Online</div>
            </div>
            
            <div class="channels-section">
                <div class="section-header">Channels</div>
                <ul class="channel-list" id="channelList">
                    <li class="channel-item active" data-channel="general">
                        <div class="channel-name">
                            <span class="channel-prefix">#</span>
                            general
                        </div>
                    </li>
                    <li class="channel-item" data-channel="random">
                        <div class="channel-name">
                            <span class="channel-prefix">#</span>
                            random
                        </div>
                    </li>
                    <li class="channel-item" data-channel="development">
                        <div class="channel-name">
                            <span class="channel-prefix">#</span>
                            development
                        </div>
                    </li>
                </ul>
                <button class="add-channel-btn" onclick="addChannel()">+ Add Channel</button>
            </div>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <div class="chat-header">
                <div class="channel-title" id="currentChannelTitle"># general</div>
                <div class="channel-info" id="currentChannelInfo">This is the general channel for team-wide communication</div>
            </div>

            <div class="messages-container" id="messagesContainer">
                <!-- Messages will be dynamically added here -->
            </div>

            <div class="message-input-container">
                <div class="message-input-wrapper">
                    <textarea 
                        class="message-input" 
                        id="messageInput" 
                        placeholder="Type your message here..."
                        rows="1"
                    ></textarea>
                    <button class="send-button" id="sendButton" onclick="sendMessage()">Send</button>
                </div>
            </div>
        </div>

        <!-- Online Users -->
        <div class="online-users">
            <div class="users-header">Online (4)</div>
            <div class="user-item">
                <div class="user-avatar">JD</div>
                <div class="user-name">John Doe</div>
                <div class="user-status-dot"></div>
            </div>
            <div class="user-item">
                <div class="user-avatar">AS</div>
                <div class="user-name">Alice Smith</div>
                <div class="user-status-dot"></div>
            </div>
            <div class="user-item">
                <div class="user-avatar">BJ</div>
                <div class="user-name">Bob Johnson</div>
                <div class="user-status-dot"></div>
            </div>
            <div class="user-item">
                <div class="user-avatar">EM</div>
                <div class="user-name">Emma Wilson</div>
                <div class="user-status-dot"></div>
            </div>
        </div>
    </div>

    <script>
        // Application state
        let currentChannel = 'general';
        let currentUser = 'John Doe';
        let channels = {
            general: {
                name: 'general',
                info: 'This is the general channel for team-wide communication',
                messages: [
                    {
                        id: 1,
                        author: 'Alice Smith',
                        text: 'Welcome to the team! üëã',
                        timestamp: new Date('2024-01-15T09:30:00'),
                        avatar: 'AS'
                    },
                    {
                        id: 2,
                        author: 'Bob Johnson',
                        text: 'Great to have everyone here. Let\'s build something amazing!',
                        timestamp: new Date('2024-01-15T09:32:00'),
                        avatar: 'BJ'
                    }
                ]
            },
            random: {
                name: 'random',
                info: 'Non-work related chatter and random stuff',
                messages: [
                    {
                        id: 1,
                        author: 'Emma Wilson',
                        text: 'Anyone seen the latest episode of that show? üì∫',
                        timestamp: new Date('2024-01-15T10:15:00'),
                        avatar: 'EM'
                    }
                ]
            },
            development: {
                name: 'development',
                info: 'Technical discussions and development updates',
                messages: [
                    {
                        id: 1,
                        author: 'John Doe',
                        text: 'Just pushed the latest changes to the main branch üöÄ',
                        timestamp: new Date('2024-01-15T11:20:00'),
                        avatar: 'JD'
                    }
                ]
            }
        };

        // Initialize the app
        function init() {
            loadMessages();
            setupEventListeners();
            
            // Auto-scroll to bottom
            const container = document.getElementById('messagesContainer');
            container.scrollTop = container.scrollHeight;
        }

        // Setup event listeners
        function setupEventListeners() {
            // Channel switching
            document.querySelectorAll('.channel-item').forEach(item => {
                item.addEventListener('click', () => switchChannel(item.dataset.channel));
            });

            // Message input
            const messageInput = document.getElementById('messageInput');
            messageInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });

            // Auto-resize textarea
            messageInput.addEventListener('input', autoResize);
        }

        // Auto-resize textarea
        function autoResize() {
            const textarea = document.getElementById('messageInput');
            textarea.style.height = 'auto';
            textarea.style.height = Math.min(textarea.scrollHeight, 100) + 'px';
        }

        // Switch channels
        function switchChannel(channelName) {
            currentChannel = channelName;
            
            // Update active channel
            document.querySelectorAll('.channel-item').forEach(item => {
                item.classList.remove('active');
            });
            document.querySelector(`[data-channel="${channelName}"]`).classList.add('active');
            
            // Update header
            document.getElementById('currentChannelTitle').textContent = `# ${channelName}`;
            document.getElementById('currentChannelInfo').textContent = channels[channelName].info;
            
            // Load messages
            loadMessages();
        }

        // Load messages for current channel
        function loadMessages() {
            const container = document.getElementById('messagesContainer');
            container.innerHTML = '';
            
            const channelMessages = channels[currentChannel].messages;
            channelMessages.forEach(message => {
                appendMessage(message);
            });
            
            // Scroll to bottom
            setTimeout(() => {
                container.scrollTop = container.scrollHeight;
            }, 100);
        }

        // Append message to container
        function appendMessage(message) {
            const container = document.getElementById('messagesContainer');
            const messageEl = document.createElement('div');
            messageEl.className = 'message';
            
            const timeStr = message.timestamp.toLocaleTimeString([], {
                hour: '2-digit',
                minute: '2-digit'
            });
            
            messageEl.innerHTML = `
                <div class="message-avatar">${message.avatar}</div>
                <div class="message-content">
                    <div class="message-header">
                        <span class="message-author">${message.author}</span>
                        <span class="message-timestamp">${timeStr}</span>
                    </div>
                    <div class="message-text">${message.text}</div>
                </div>
            `;
            
            container.appendChild(messageEl);
        }

        // Send message
        function sendMessage() {
            const input = document.getElementById('messageInput');
            const text = input.value.trim();
            
            if (!text) return;
            
            const message = {
                id: Date.now(),
                author: currentUser,
                text: text,
                timestamp: new Date(),
                avatar: 'JD'
            };
            
            // Add to channel messages
            channels[currentChannel].messages.push(message);
            
            // Append to UI
            appendMessage(message);
            
            // Clear input
            input.value = '';
            input.style.height = 'auto';
            
            // Scroll to bottom
            const container = document.getElementById('messagesContainer');
            container.scrollTop = container.scrollHeight;
            
            // Simulate typing indicator and responses
            setTimeout(() => simulateResponse(), 1000 + Math.random() * 2000);
        }

        // Simulate responses from other users
        function simulateResponse() {
            const responses = [
                { author: 'Alice Smith', avatar: 'AS', texts: ['Great point!', 'I agree with that', 'Interesting perspective', 'Thanks for sharing!'] },
                { author: 'Bob Johnson', avatar: 'BJ', texts: ['Nice work!', 'That makes sense', 'Good idea', 'Let\'s discuss this further'] },
                { author: 'Emma Wilson', avatar: 'EM', texts: ['Love it! üí™', 'Awesome!', 'That\'s brilliant', 'Count me in!'] }
            ];
            
            const randomResponse = responses[Math.floor(Math.random() * responses.length)];
            const randomText = randomResponse.texts[Math.floor(Math.random() * randomResponse.texts.length)];
            
            const message = {
                id: Date.now(),
                author: randomResponse.author,
                text: randomText,
                timestamp: new Date(),
                avatar: randomResponse.avatar
            };
            
            channels[currentChannel].messages.push(message);
            appendMessage(message);
            
            const container = document.getElementById('messagesContainer');
            container.scrollTop = container.scrollHeight;
        }

        // Add new channel
        function addChannel() {
            const channelName = prompt('Enter channel name:');
            if (!channelName || channels[channelName]) return;
            
            channels[channelName] = {
                name: channelName,
                info: `Channel for ${channelName} discussions`,
                messages: []
            };
            
            const channelList = document.getElementById('channelList');
            const channelItem = document.createElement('li');
            channelItem.className = 'channel-item';
            channelItem.dataset.channel = channelName;
            channelItem.innerHTML = `
                <div class="channel-name">
                    <span class="channel-prefix">#</span>
                    ${channelName}
                </div>
            `;
            
            channelItem.addEventListener('click', () => switchChannel(channelName));
            channelList.appendChild(channelItem);
            
            switchChannel(channelName);
        }

        // Initialize the app when DOM is loaded
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>